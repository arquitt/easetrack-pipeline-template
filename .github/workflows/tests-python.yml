name: Tests
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      app_path:
        required: false
        type: string
        default: "."
      deps_path:
        required: false
        type: string
        default: "."
      changelog_path:
        required: false
        type: string
        default: "."
      run_lint:
        required: false
        type: boolean
        default: true
      run_pytest:
        required: false
        type: boolean
        default: true
      run_changelog:
        required: false
        type: boolean
        default: true
    secrets:
      GH_PUSHER:
        required: true
      GH_PAT:
        required: true
  push:
    branches:
      - dev
  pull_request:
    branches:
      - "*"
    paths-ignore:
      - "**.md"
jobs:
  Unit:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_USER: arquitt
          POSTGRES_PASSWORD: arquitt
          POSTGRES_DB: easetrack
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U arquitt -d easetrack"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    env:
      DATABASE_URL: postgresql+psycopg2://arquitt:arquitt@localhost:5432/easetrack
      PGPASSWORD: arquitt
      POETRY_VIRTUALENVS_CREATE: "true"
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GH_PUSHER }}

      - name: Configure git user
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com

      - name: Install Poetry
        run: pipx install poetry

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "poetry"

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          sudo apt-get install -y libxml2-utils
          git config --global url."https://x-token-auth:${{ secrets.GH_PAT }}@github.com".insteadOf "ssh://git@github.com"
          poetry config installer.max-workers 10
          if grep -q '\[tool.poetry.group.test.dependencies\]' pyproject.toml; then
            poetry install --no-root --with main,test
          else
            poetry install --no-root --with main,dev
          fi

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U arquitt -d easetrack; do
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Reset database
        run: |
          psql -h localhost -U arquitt -d postgres -c "DROP DATABASE IF EXISTS easetrack;"
          psql -h localhost -U arquitt -d postgres -c "CREATE DATABASE easetrack;"

      - name: Run migrations
        run: |
          sed -i "s|/usr/local/lib/python3.13/site-packages|$(poetry run python -c 'import site; print(site.getsitepackages()[0])')|g" alembic.ini
          PYTHONPATH=. poetry run alembic upgrade head

      - name: Run tests
        id: tests
        run: |
          set -a
          sed -e '/^\s*#/d' -e '/^\s*$/d' .env.sample > /tmp/envfile
          source /tmp/envfile
          set +a
          PYTHONPATH=. poetry run pytest -v --maxfail=1 --disable-warnings
          coverage_percentage=$(xmllint --xpath "string(//coverage/@line-rate)" coverage.xml)
          coverage_percentage=$(echo "$coverage_percentage * 100" | bc)
          formatted_coverage=$(printf "%.1f" "$coverage_percentage")
          echo "Coverage Percentage: $formatted_coverage"
          echo "coverage_percentage=${formatted_coverage}" >> $GITHUB_OUTPUT

      - name: Create coverage badge
        uses: emibcn/badge-action@v2.0.2
        with:
          label: "Coverage"
          status: "${{ steps.tests.outputs.coverage_percentage }}%"
          color: "31C754"
          label-color: "414951"
          path: ".github/badges/coverage.svg"

      - name: Check for badge changes
        id: check_for_badge_changes
        run: |
          if git diff --quiet .github/badges/coverage.svg; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes if badge updated
        if: steps.check_for_badge_changes.outputs.changed == 'true'
        run: |
          git add .github/badges/coverage.svg
          git commit -m "docs: update coverage badge [skip ci]"
          git push
        continue-on-error: true

  Lint:
    if: ${{ inputs.run_lint == true }}
    name: Linter Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GH_PUSHER }}
      - run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            ~/.cache/pre-commit
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-

      - name: Install dependencies
        run: pip install pre-commit

      - name: Run pre-commit bundle
        run: |
          cd ${{ inputs.app_path }}
          grep -q '^fail_fast: true' .pre-commit-config.yaml || sed -i '/^---$/a fail_fast: true' .pre-commit-config.yaml
          pre-commit run --all-files --hook-stage manual

  Changelog:
    if: ${{ inputs.run_changelog == true }}
    name: Changelog Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Get project version
        id: vars
        run: |
          echo "project_version=$(cat .version)" >> $GITHUB_OUTPUT
      - name: Verifica arquivo de changelog
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_level: "error"
          validation_depth: 5
          version: ${{ steps.vars.outputs.project_version }}
          path: ${{ inputs.changelog_path }}/CHANGELOG.md